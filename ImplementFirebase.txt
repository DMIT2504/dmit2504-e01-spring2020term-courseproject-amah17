1. Create an App with a googleMap Activity

2. You need a google maps API key, so follow the link povided in the google_maps_api.xml and follow the steps provided there

4. Next we need to get the firebase. Go to console.firebase.google.com and follow the instructions provided.
	There SHOULD only be a few changes to the build.gradle(project) and build.gradle(module)

5. Now we must setup our database. Select the project that you just created, should be named the same as the when you got the google maps key.
	Select Cloud Firestore -> Create Database -> Start in Production mode -> Choose the desired timezone/server -> Done

6. This will take some time to setup the database. Ensure that Read/Write is true in the Rules

7. Go to AndroidMainfest. Added a ensure that the Access Fine Location permission is added. Add another permission of Access Coarse Location

8. Navigate to the MapActivity, and add in the onCreate method: 
	ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION}, PackageManager.PERMISSION_GRANTED);
	
	This asks the user for permission to use the Fine Location, and coarse Location.

9. Navigate to the maps activity xml file. Add two edit Texts and one button. We have to do this for the emulator since we can't (or I don't know how) to spoof the emulators location.
	You can make it look as you please. Note that one text will be for Longtitude, and the other will be Latitude.

10. Go back to the map activity Java. Check that there is a private GoogleMap mMap; declared
	Also declare private DatabaseReference mDatabaseReference;
	As well as LocationListener, Locationmanager, long MIN_TIME = 1000, long MIN_DIST = 5.

11. Within the onCreate, we will assign mDatabaseReference = FirebaseDatabase.getInstance().getReference("Location");
	AND
	mDatabaseReference.addValueEventListener(new ValueEventListener())

	This shoudl create two methods, onDataChange and onCancelled
	We will need to add some logic to the onDataChange in a try catch
	try:
		String databaseLatString = dataSnapshot.child("latitude").getValue().toString().substring(1,dataSnapshot.child("latitude").getValue().toString().length() - 1);
                    String databaseLongString = dataSnapshot.child("longitude").getValue().toString().substring(1,dataSnapshot.child("longitude").getValue().toString().length() - 1);

                    String[] stringLat = databaseLatString.split(", ");
                    Arrays.sort(stringLat);
                    String latitude = stringLat[stringLat.length-1].split("=")[1];
                    String[] stringLong = databaseLongString.split(", ");
                    Arrays.sort(stringLong);
                    String longitude = stringLat[stringLong.length-1].split("=")[1];

                    LatLng latLng = new LatLng(Double.parseDouble(latitude), Double.parseDouble(longitude));

                    mMap.addMarker(new MarkerOptions().position(latLng).title(latitude + " , " + longitude));
                    mMap.moveCamera(CameraUpdateFactory.newLatLng(latLng));
	catch:
		e.printStackTrace();

12. I'd also recommend checking you created an onClick method for the button.

13. Go to the onMapReady method
	ensure there is mMap = googleMap;
	Comment out the other provided code
	Assign a new LocatinListener() to mLocationListener.
	This will create 4 methods. 

14. for onLocationChanged
	Add a Try catch. In the try: Set the latitude edittext to Double.toString(location.getLatitude())
	do the same for Longitude
	In the catch, simply set it to print e to the stacktrace.

15. Outside of the mLocationListener
	mLocationmanager = (LocationManager) getSystemService(LOCATION_SERVICE);

16. Then we need to check the permissions 
	if(ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED)

17. Then we are making another Try Catch
	try:	
		mLocationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, MIN_TIME, MIN_DIST, mLocationListener);
		mLocationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, MIN_TIME, MIN_DIST, mLocationListener);
	catch:
		e.printStackTrace();

18. Now we can add our locations to the database. Go to updateOnclick method
	add:
		mDatabaseReference.child("latitude").push().setValue(editTextLat.getText().toString());
		mDatabaseReference.child("longitude").push().setValue(editTextLong.getText().toString());

19. Now when you run the app, you should be able to enter in a long and lat and it will update the map to that location
	and place a marker. As well as putting those co-ordinates into the firebase database.




